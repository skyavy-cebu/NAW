<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Event', 'doctrine');

/**
 * BaseEvent
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property text $description
 * @property date $event_date
 * @property time $start_time
 * @property time $end_time
 * @property integer $city_id
 * @property string $venue
 * @property string $address
 * @property integer $prepay_slots
 * @property integer $max_capacity
 * @property decimal $admission_prepay
 * @property decimal $admission_at_door
 * @property decimal $admission_no_rsvp
 * @property string $image_full
 * @property string $image_small
 * @property integer $event_admin1
 * @property integer $event_admin2
 * @property City $City
 * @property Doctrine_Collection $EventAttendee
 * 
 * @method integer             getId()                Returns the current record's "id" value
 * @method text                getDescription()       Returns the current record's "description" value
 * @method date                getEventDate()         Returns the current record's "event_date" value
 * @method time                getStartTime()         Returns the current record's "start_time" value
 * @method time                getEndTime()           Returns the current record's "end_time" value
 * @method integer             getCityId()            Returns the current record's "city_id" value
 * @method string              getVenue()             Returns the current record's "venue" value
 * @method string              getAddress()           Returns the current record's "address" value
 * @method integer             getPrepaySlots()       Returns the current record's "prepay_slots" value
 * @method integer             getMaxCapacity()       Returns the current record's "max_capacity" value
 * @method decimal             getAdmissionPrepay()   Returns the current record's "admission_prepay" value
 * @method decimal             getAdmissionAtDoor()   Returns the current record's "admission_at_door" value
 * @method decimal             getAdmissionNoRsvp()   Returns the current record's "admission_no_rsvp" value
 * @method string              getImageFull()         Returns the current record's "image_full" value
 * @method string              getImageSmall()        Returns the current record's "image_small" value
 * @method integer             getEventAdmin1()       Returns the current record's "event_admin1" value
 * @method integer             getEventAdmin2()       Returns the current record's "event_admin2" value
 * @method City                getCity()              Returns the current record's "City" value
 * @method Doctrine_Collection getEventAttendee()     Returns the current record's "EventAttendee" collection
 * @method Event               setId()                Sets the current record's "id" value
 * @method Event               setDescription()       Sets the current record's "description" value
 * @method Event               setEventDate()         Sets the current record's "event_date" value
 * @method Event               setStartTime()         Sets the current record's "start_time" value
 * @method Event               setEndTime()           Sets the current record's "end_time" value
 * @method Event               setCityId()            Sets the current record's "city_id" value
 * @method Event               setVenue()             Sets the current record's "venue" value
 * @method Event               setAddress()           Sets the current record's "address" value
 * @method Event               setPrepaySlots()       Sets the current record's "prepay_slots" value
 * @method Event               setMaxCapacity()       Sets the current record's "max_capacity" value
 * @method Event               setAdmissionPrepay()   Sets the current record's "admission_prepay" value
 * @method Event               setAdmissionAtDoor()   Sets the current record's "admission_at_door" value
 * @method Event               setAdmissionNoRsvp()   Sets the current record's "admission_no_rsvp" value
 * @method Event               setImageFull()         Sets the current record's "image_full" value
 * @method Event               setImageSmall()        Sets the current record's "image_small" value
 * @method Event               setEventAdmin1()       Sets the current record's "event_admin1" value
 * @method Event               setEventAdmin2()       Sets the current record's "event_admin2" value
 * @method Event               setCity()              Sets the current record's "City" value
 * @method Event               setEventAttendee()     Sets the current record's "EventAttendee" collection
 * 
 * @package    symfony
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseEvent extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('event');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('description', 'text', null, array(
             'type' => 'text',
             ));
        $this->hasColumn('event_date', 'date', null, array(
             'type' => 'date',
             ));
        $this->hasColumn('start_time', 'time', null, array(
             'type' => 'time',
             ));
        $this->hasColumn('end_time', 'time', null, array(
             'type' => 'time',
             ));
        $this->hasColumn('city_id', 'integer', 2, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'default' => 0,
             'length' => 2,
             ));
        $this->hasColumn('venue', 'string', 150, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 150,
             ));
        $this->hasColumn('address', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('prepay_slots', 'integer', 2, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'default' => 0,
             'length' => 2,
             ));
        $this->hasColumn('max_capacity', 'integer', 2, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'default' => 0,
             'length' => 2,
             ));
        $this->hasColumn('admission_prepay', 'decimal', null, array(
             'type' => 'decimal',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('admission_at_door', 'decimal', null, array(
             'type' => 'decimal',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('admission_no_rsvp', 'decimal', null, array(
             'type' => 'decimal',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('image_full', 'string', 150, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 150,
             ));
        $this->hasColumn('image_small', 'string', 150, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 150,
             ));
        $this->hasColumn('event_admin1', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'default' => 0,
             'length' => 4,
             ));
        $this->hasColumn('event_admin2', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'default' => 0,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('City', array(
             'local' => 'city_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE',
             'onUpdate' => 'CASCADE'));

        $this->hasMany('EventAttendee', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}